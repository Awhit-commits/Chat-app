{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nlet socket; // export default class Chat extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//         }\n//     }\n//     // useEffect = ((location) =>{\n//     //     const data = queryString.parse(location.search)\n//     //     console.log(location.search);\n//     //     console.log(data);\n//     // });\n//     componentDidMount(){\n//         useEffect((location) =>{\n//         })\n//     }\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <h1>Chat</h1>\n//             </div>\n//         )\n//     }\n// }\n//  const Chat=({location}) =>{\n//      const [name,setName] = useState('');\n//      const [room,setRoom] = useState('');\n//      const [message,setMessage]= useState(\"\");\n//      const [messages,setMessages]=useState([]);\n//      const ENDPOINT  ='localhost:5000'\n//      useEffect(() =>{\n//          const {name,room} = queryString.parse(location.search)\n//          console.log(name,room);\n//          //Sanity checks to see if we're getting room and name back in console\n//          console.log(location.search);\n//         socket = io(ENDPOINT);\n//          setName(name);\n//          setRoom(room);\n// //TODO: Finish socket.emit function\n//         //  socket.emit('join',{name,room});\n//          //send name and room to server side\n//          socket.emit('join',{name,room},() =>{\n//          });\n//          console.log(socket)\n//          return ()=>{\n//              socket.emit('disconnect');\n//              socket.off();\n//          }\n//      },[ENDPOINT,location.search])\n//      useEffect(() => {\n//          socket.on('message',(message)=>{\n//              setMessages([...messages,message])\n//          },[messages])\n//      })\n//      const sendMessage  = (event) =>{\n//          event.preventDefault();\n//          //if statement sends message then clears input field\n//          if (message){\n//              socket.emit('sendMessage',message,()=> setMessage(''));\n//          }\n//      }\n//      console.log(message,messages);\n//     return (\n//         <div className =\"outerContainer\">\n//             <div className =\"container\">\n//                 <InfoBar room ={room}/>\n//                 <Input message ={message} setMessage = {setMessage} sendMessage  = {sendMessage}/>\n//             </div>\n//         </div>\n//     )\n// }\n\nexport default Chat;","map":{"version":3,"sources":["/Users/andrewwhitmore/Documents/GitHub/chat-app/client/src/components/Chat/Chat.jsx"],"names":["React","useEffect","useState","queryString","io","InfoBar","Input","socket","Chat"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,IAAIC,MAAJ,C,CAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,eAAeC,IAAf","sourcesContent":["import React, { useEffect,useState} from 'react'\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input'\nlet socket;\n\n// export default class Chat extends Component {\n//     constructor(props) {\n//         super(props)\n    \n//         this.state = {\n    \n             \n//         }\n//     }\n//     // useEffect = ((location) =>{\n//     //     const data = queryString.parse(location.search)\n//     //     console.log(location.search);\n//     //     console.log(data);\n//     // });\n//     componentDidMount(){\n//         useEffect((location) =>{\n\n//         })\n//     }\n\n       \n\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <h1>Chat</h1>\n//             </div>\n//         )\n//     }\n// }\n\n\n//  const Chat=({location}) =>{\n//      const [name,setName] = useState('');\n//      const [room,setRoom] = useState('');\n//      const [message,setMessage]= useState(\"\");\n//      const [messages,setMessages]=useState([]);\n//      const ENDPOINT  ='localhost:5000'\n//      useEffect(() =>{\n//          const {name,room} = queryString.parse(location.search)\n//          console.log(name,room);\n//          //Sanity checks to see if we're getting room and name back in console\n//          console.log(location.search);\n//         socket = io(ENDPOINT);\n\n//          setName(name);\n//          setRoom(room);\n// //TODO: Finish socket.emit function\n//         //  socket.emit('join',{name,room});\n\n\n         \n\n//          //send name and room to server side\n//          socket.emit('join',{name,room},() =>{\n\n//          });\n\n         \n//          console.log(socket)\n//          return ()=>{\n//              socket.emit('disconnect');\n//              socket.off();\n//          }\n\n         \n        \n//      },[ENDPOINT,location.search])\n\n//      useEffect(() => {\n//          socket.on('message',(message)=>{\n//              setMessages([...messages,message])\n\n//          },[messages])\n//      })\n\n//      const sendMessage  = (event) =>{\n//          event.preventDefault();\n\n//          //if statement sends message then clears input field\n//          if (message){\n//              socket.emit('sendMessage',message,()=> setMessage(''));\n//          }\n         \n//      }\n//      console.log(message,messages);\n//     return (\n//         <div className =\"outerContainer\">\n//             <div className =\"container\">\n//                 <InfoBar room ={room}/>\n//                 <Input message ={message} setMessage = {setMessage} sendMessage  = {sendMessage}/>\n\n//             </div>\n\n//         </div>\n//     )\n// }\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}